name: Build Macos Binary

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main

jobs:
  macos:
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create & unlock keychain
        env:
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          security create-keychain -p "$CERT_PASSWORD" build.keychain
          security unlock-keychain -p "$CERT_PASSWORD" build.keychain
          security set-keychain-settings build.keychain

      - name: Import certificate
        env:
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo "$SIGNING_CERTIFICATE" | base64 --decode > signing_certificate.p12
          security import signing_certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -k "$CERT_PASSWORD" build.keychain
          security find-identity -p codesigning -v build.keychain

      - name: Configure keychain search path
        run: security list-keychains -d user -s build.keychain $(security list-keychains -d user | sed 's/\"//g')

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.9.0"

      - name: Install dependencies
        run: npm install

      - name: Build macOS App
        run: npm run tauri build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  windows:
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc

    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.9.0"

      - name: Install dependencies
        run: npm install

      - name: Build Windows
        run: npm run tauri build -- --target ${{ matrix.target }}

      - name: Find Windows Artifact
        shell: pwsh
        run: |
          $exeFile = Get-ChildItem -Path 'src-tauri/target/release/bundle/nsis' -Recurse -Filter '*.exe' | Select-Object -First 1
          if (-not $exeFile) {
            Write-Host "Error: EXE file not found!"
            exit 1
          }
          Write-Host "EXE_FILE=$($exeFile.FullName)" | Out-File -FilePath $Env:GITHUB_ENV -Append
          Write-Host "Found EXE_FILE: $($exeFile.FullName)"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: termigo-windows-${{ matrix.target }}
          path: ${{ env.EXE_FILE }}
