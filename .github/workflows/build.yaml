name: Build Macos Binary

on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main

jobs:
  macos:
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create & unlock keychain
        env:
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          security create-keychain -p "$CERT_PASSWORD" build.keychain
          security unlock-keychain -p "$CERT_PASSWORD" build.keychain
          # 讓 codesign / xcode 可以使用這個 keychain
          security set-keychain-settings build.keychain

      - name: Import certificate
        env:
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          echo "$SIGNING_CERTIFICATE" | base64 --decode > signing_certificate.p12
          security import signing_certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -k "$CERT_PASSWORD" build.keychain
          security find-identity -p codesigning -v build.keychain

      - name: Configure keychain search path
        run: |
          security list-keychains -d user -s build.keychain $(security list-keychains -d user | sed 's/\"//g')

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.9.0"

      - name: Install dependencies
        run: npm install

      - name: Build macOS App
        run: npm run tauri build

      - name: Find DMG file
        id: find-dmg
        run: |
          DMG_FILE=$(find src-tauri/target/release/bundle/dmg -name "*.dmg")
          if [ -z "$DMG_FILE" ]; then
            echo "Error: DMG file not found!"
            exit 1
          fi
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV

      - name: Notarize with notarytool
        env:
          NOTARIZE_USERNAME: ${{ secrets.APPLE_ID }}
          NOTARIZE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

        run: |
          echo "Start notarization for: $DMG_FILE"
          xcrun notarytool submit "${{ env.DMG_FILE }}" \
            --apple-id "$NOTARIZE_USERNAME" \
            --password "$NOTARIZE_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \        
            --wait

      - name: Staple
        run: |
          xcrun stapler staple "${{ env.DMG_FILE }}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: myapp-macos
          path: ${{ env.DMG_FILE }}

      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true

  windows:
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc

    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.9.0"

      - name: Install dependencies
        run: npm install

      - name: Build Windows
        run: npm run tauri build -- --target ${{ matrix.target }}

      - name: Find Windows Artifact
        run: |
          EXE_FILE=$(find src-tauri/target/release/bundle/nsis -name "*.exe" | head -n 1)
          if [ -z "$EXE_FILE" ]; then
            echo "Error: EXE file not found!"
            exit 1
          fi
          echo "EXE_FILE=$EXE_FILE" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: termigo-windows-${{ matrix.target }}
          path: ${{ env.EXE_FILE }}
